buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'

        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"

    }
    configurations.all {
        resolutionStrategy {
            // Override the default version of ProGuard
            // with the most recent one.
            force 'net.sf.proguard:proguard-gradle:6.0.3'
        }
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
}

description = 'bcp'
version = '1.0'

sonarqube {
    properties {
        property 'sonar.projectName', '9220_bcp'
    }
}

apply plugin: 'android'

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    implementation 'com.sun.mail:android-mail:1.5.5'
    implementation 'com.sun.mail:android-activation:1.5.5'
    implementation 'com.github.zhou256bug:android-ninekeyboard-msater:v1.5'
    implementation 'com.github.zhou256bug:android-baserecyle-master:v1.1'
    implementation 'com.github.zhou256bug:android-popuplist-master:v1.1'
    implementation 'com.github.zhou256bug:android-admanager-master:v1.0'
    implementation 'com.github.angads25:toggle:1.0.0'
    //noinspection GradleCompatible
    implementation 'androidx.appcompat:appcompat:1.2.0'
    //noinspection GradleCompatible
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    //noinspection GradleCompatible
    implementation 'androidx.cardview:cardview:1.0.0'
    //noinspection GradleCompatible
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'com.google.zxing:core:3.2.1'
    implementation 'com.journeyapps:zxing-android-embedded:3.2.0@aar'
    implementation files('libs/desert-email-1709191523.jar')
    implementation 'com.readystatesoftware.sqliteasset:sqliteassethelper:2.0.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    compileOnly files('extlib/sdk.jar')
    implementation(name: 'emvl2', ext: 'aar')
    compileOnly files('libs/libpboc.jar')
    implementation 'com.github.gcacace:signature-pad:1.2.1'
    implementation 'com.google.guava:guava:24.1-jre'
    implementation 'com.getbase:floatingactionbutton:1.10.1'
    implementation 'com.android.volley:volley:1.1.0'
    //noinspection GradleCompatible
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'commons-io:commons-io:2.5'
    implementation 'junit:junit:4.13'
    //noinspection GradleCompatible
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'junit:junit:4.13'
    implementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'androidx.test:core:1.3.0'
    /*jwe*/
    implementation 'org.bitbucket.b_c:jose4j:0.7.0'
    /*manejo de gif json*/
    implementation 'com.airbnb.android:lottie:3.4.2'
    //Navegacion en los fragments
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'
    implementation 'ru.egslava:MaskedEditText:1.0.5'
    implementation 'com.github.santalu:maskara:1.0.0'
}

repositories {
    flatDir {
        dirs 'extaar'
        dirs 'libs'// 引入AAR
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        maven {
            url "https://maven.java.net/content/groups/public/"
        }
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

import java.text.SimpleDateFormat

def getDate(String dateFormat) {
    def df = new SimpleDateFormat(dateFormat)
    Calendar c = Calendar.getInstance();
    TimeZone tz = c.getTimeZone();
    df.setTimeZone(tz)
    return df.format(new Date())
}

def getLongDate() {
    return getDate("yyMMddHHss")
}

def getShortDate() {
    return getDate("yyMMdd")
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    lintOptions {
        checkReleaseBuilds false
    }
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 80
        versionName '1.3.1'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        applicationId 'com.wposs.bcp'

    }
    packagingOptions {
        pickFirst 'META-INF/LICENSE.txt' // picks the JavaMail license file
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    productFlavors {
    }
    aaptOptions {
        cruncherEnabled = false
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            proguardFile 'proguard-project.txt'
        }
    }
}
